/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as AuthTrashImport } from './routes/auth/trash'
import { Route as AuthAddOneImport } from './routes/auth/addOne'
import { Route as AuthTodosTodoIdImport } from './routes/auth/todos/$todoId'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const AuthTrashRoute = AuthTrashImport.update({
  id: '/auth/trash',
  path: '/auth/trash',
  getParentRoute: () => rootRoute,
} as any)

const AuthAddOneRoute = AuthAddOneImport.update({
  id: '/auth/addOne',
  path: '/auth/addOne',
  getParentRoute: () => rootRoute,
} as any)

const AuthTodosTodoIdRoute = AuthTodosTodoIdImport.update({
  id: '/auth/todos/$todoId',
  path: '/auth/todos/$todoId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/auth/addOne': {
      id: '/auth/addOne'
      path: '/auth/addOne'
      fullPath: '/auth/addOne'
      preLoaderRoute: typeof AuthAddOneImport
      parentRoute: typeof rootRoute
    }
    '/auth/trash': {
      id: '/auth/trash'
      path: '/auth/trash'
      fullPath: '/auth/trash'
      preLoaderRoute: typeof AuthTrashImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/todos/$todoId': {
      id: '/auth/todos/$todoId'
      path: '/auth/todos/$todoId'
      fullPath: '/auth/todos/$todoId'
      preLoaderRoute: typeof AuthTodosTodoIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/auth/addOne': typeof AuthAddOneRoute
  '/auth/trash': typeof AuthTrashRoute
  '/auth': typeof AuthIndexRoute
  '/auth/todos/$todoId': typeof AuthTodosTodoIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/auth/addOne': typeof AuthAddOneRoute
  '/auth/trash': typeof AuthTrashRoute
  '/auth': typeof AuthIndexRoute
  '/auth/todos/$todoId': typeof AuthTodosTodoIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/auth/addOne': typeof AuthAddOneRoute
  '/auth/trash': typeof AuthTrashRoute
  '/auth/': typeof AuthIndexRoute
  '/auth/todos/$todoId': typeof AuthTodosTodoIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/auth/addOne'
    | '/auth/trash'
    | '/auth'
    | '/auth/todos/$todoId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/auth/addOne'
    | '/auth/trash'
    | '/auth'
    | '/auth/todos/$todoId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/auth/addOne'
    | '/auth/trash'
    | '/auth/'
    | '/auth/todos/$todoId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  AuthAddOneRoute: typeof AuthAddOneRoute
  AuthTrashRoute: typeof AuthTrashRoute
  AuthIndexRoute: typeof AuthIndexRoute
  AuthTodosTodoIdRoute: typeof AuthTodosTodoIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  AuthAddOneRoute: AuthAddOneRoute,
  AuthTrashRoute: AuthTrashRoute,
  AuthIndexRoute: AuthIndexRoute,
  AuthTodosTodoIdRoute: AuthTodosTodoIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/register",
        "/auth/addOne",
        "/auth/trash",
        "/auth/",
        "/auth/todos/$todoId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/auth/addOne": {
      "filePath": "auth/addOne.tsx"
    },
    "/auth/trash": {
      "filePath": "auth/trash.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/auth/todos/$todoId": {
      "filePath": "auth/todos/$todoId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
