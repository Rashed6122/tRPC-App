/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthTrashImport } from './routes/_auth/trash'
import { Route as AuthHomeImport } from './routes/_auth/home'
import { Route as AuthAddOneImport } from './routes/_auth/addOne'
import { Route as AuthTodosTodoIdImport } from './routes/_auth/todos/$todoId'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthTrashRoute = AuthTrashImport.update({
  id: '/trash',
  path: '/trash',
  getParentRoute: () => AuthRoute,
} as any)

const AuthHomeRoute = AuthHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AuthRoute,
} as any)

const AuthAddOneRoute = AuthAddOneImport.update({
  id: '/addOne',
  path: '/addOne',
  getParentRoute: () => AuthRoute,
} as any)

const AuthTodosTodoIdRoute = AuthTodosTodoIdImport.update({
  id: '/todos/$todoId',
  path: '/todos/$todoId',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_auth/addOne': {
      id: '/_auth/addOne'
      path: '/addOne'
      fullPath: '/addOne'
      preLoaderRoute: typeof AuthAddOneImport
      parentRoute: typeof AuthImport
    }
    '/_auth/home': {
      id: '/_auth/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthHomeImport
      parentRoute: typeof AuthImport
    }
    '/_auth/trash': {
      id: '/_auth/trash'
      path: '/trash'
      fullPath: '/trash'
      preLoaderRoute: typeof AuthTrashImport
      parentRoute: typeof AuthImport
    }
    '/_auth/todos/$todoId': {
      id: '/_auth/todos/$todoId'
      path: '/todos/$todoId'
      fullPath: '/todos/$todoId'
      preLoaderRoute: typeof AuthTodosTodoIdImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthAddOneRoute: typeof AuthAddOneRoute
  AuthHomeRoute: typeof AuthHomeRoute
  AuthTrashRoute: typeof AuthTrashRoute
  AuthTodosTodoIdRoute: typeof AuthTodosTodoIdRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAddOneRoute: AuthAddOneRoute,
  AuthHomeRoute: AuthHomeRoute,
  AuthTrashRoute: AuthTrashRoute,
  AuthTodosTodoIdRoute: AuthTodosTodoIdRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/addOne': typeof AuthAddOneRoute
  '/home': typeof AuthHomeRoute
  '/trash': typeof AuthTrashRoute
  '/todos/$todoId': typeof AuthTodosTodoIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/addOne': typeof AuthAddOneRoute
  '/home': typeof AuthHomeRoute
  '/trash': typeof AuthTrashRoute
  '/todos/$todoId': typeof AuthTodosTodoIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_auth/addOne': typeof AuthAddOneRoute
  '/_auth/home': typeof AuthHomeRoute
  '/_auth/trash': typeof AuthTrashRoute
  '/_auth/todos/$todoId': typeof AuthTodosTodoIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/addOne'
    | '/home'
    | '/trash'
    | '/todos/$todoId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/addOne'
    | '/home'
    | '/trash'
    | '/todos/$todoId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/register'
    | '/_auth/addOne'
    | '/_auth/home'
    | '/_auth/trash'
    | '/_auth/todos/$todoId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/addOne",
        "/_auth/home",
        "/_auth/trash",
        "/_auth/todos/$todoId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_auth/addOne": {
      "filePath": "_auth/addOne.tsx",
      "parent": "/_auth"
    },
    "/_auth/home": {
      "filePath": "_auth/home.tsx",
      "parent": "/_auth"
    },
    "/_auth/trash": {
      "filePath": "_auth/trash.tsx",
      "parent": "/_auth"
    },
    "/_auth/todos/$todoId": {
      "filePath": "_auth/todos/$todoId.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
