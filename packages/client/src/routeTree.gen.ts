/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TrashImport } from './routes/trash'
import { Route as AddOneImport } from './routes/addOne'
import { Route as IndexImport } from './routes/index'
import { Route as TodosTodoIdImport } from './routes/todos/$todoId'

// Create/Update Routes

const TrashRoute = TrashImport.update({
  id: '/trash',
  path: '/trash',
  getParentRoute: () => rootRoute,
} as any)

const AddOneRoute = AddOneImport.update({
  id: '/addOne',
  path: '/addOne',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TodosTodoIdRoute = TodosTodoIdImport.update({
  id: '/todos/$todoId',
  path: '/todos/$todoId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/addOne': {
      id: '/addOne'
      path: '/addOne'
      fullPath: '/addOne'
      preLoaderRoute: typeof AddOneImport
      parentRoute: typeof rootRoute
    }
    '/trash': {
      id: '/trash'
      path: '/trash'
      fullPath: '/trash'
      preLoaderRoute: typeof TrashImport
      parentRoute: typeof rootRoute
    }
    '/todos/$todoId': {
      id: '/todos/$todoId'
      path: '/todos/$todoId'
      fullPath: '/todos/$todoId'
      preLoaderRoute: typeof TodosTodoIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/addOne': typeof AddOneRoute
  '/trash': typeof TrashRoute
  '/todos/$todoId': typeof TodosTodoIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/addOne': typeof AddOneRoute
  '/trash': typeof TrashRoute
  '/todos/$todoId': typeof TodosTodoIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/addOne': typeof AddOneRoute
  '/trash': typeof TrashRoute
  '/todos/$todoId': typeof TodosTodoIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/addOne' | '/trash' | '/todos/$todoId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/addOne' | '/trash' | '/todos/$todoId'
  id: '__root__' | '/' | '/addOne' | '/trash' | '/todos/$todoId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddOneRoute: typeof AddOneRoute
  TrashRoute: typeof TrashRoute
  TodosTodoIdRoute: typeof TodosTodoIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddOneRoute: AddOneRoute,
  TrashRoute: TrashRoute,
  TodosTodoIdRoute: TodosTodoIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/addOne",
        "/trash",
        "/todos/$todoId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/addOne": {
      "filePath": "addOne.tsx"
    },
    "/trash": {
      "filePath": "trash.tsx"
    },
    "/todos/$todoId": {
      "filePath": "todos/$todoId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
